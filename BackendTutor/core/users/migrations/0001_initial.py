# Generated by Django 5.1.2 on 2025-05-29 06:42

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PreguntaEvaluacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nivel', models.CharField(choices=[('NO_EXPERIENCIA', 'Sin Experiencia'), ('PRINCIPIANTE', 'Principiante'), ('INTERMEDIO', 'Intermedio'), ('AVANZADO', 'Avanzado')], max_length=20)),
                ('pregunta', models.TextField()),
                ('opcion_a', models.CharField(max_length=200)),
                ('opcion_b', models.CharField(max_length=200)),
                ('opcion_c', models.CharField(max_length=200)),
                ('opcion_d', models.CharField(max_length=200)),
                ('respuesta_correcta', models.CharField(max_length=1)),
                ('explicacion', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('programming_level', models.CharField(blank=True, choices=[('NO_EXPERIENCIA', 'Sin Experiencia'), ('PRINCIPIANTE', 'Principiante'), ('INTERMEDIO', 'Intermedio'), ('AVANZADO', 'Avanzado')], max_length=20, null=True)),
                ('puntos_experiencia', models.PositiveIntegerField(default=0, help_text='Experiencia acumulada en puntos')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EvaluacionDiagnostica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateTimeField(auto_now_add=True)),
                ('fecha_finalizacion', models.DateTimeField(blank=True, null=True)),
                ('estado', models.CharField(choices=[('EN_PROGRESO', 'En Progreso'), ('COMPLETADA', 'Completada'), ('CANCELADA', 'Cancelada')], default='EN_PROGRESO', max_length=20)),
                ('nivel_seleccionado', models.CharField(choices=[('NO_EXPERIENCIA', 'Sin Experiencia'), ('PRINCIPIANTE', 'Principiante'), ('INTERMEDIO', 'Intermedio'), ('AVANZADO', 'Avanzado')], max_length=20)),
                ('nivel_asignado', models.CharField(blank=True, choices=[('NO_EXPERIENCIA', 'Sin Experiencia'), ('PRINCIPIANTE', 'Principiante'), ('INTERMEDIO', 'Intermedio'), ('AVANZADO', 'Avanzado')], max_length=20, null=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluaciones', to=settings.AUTH_USER_MODEL)),
                ('preguntas', models.ManyToManyField(to='users.preguntaevaluacion')),
            ],
        ),
        migrations.CreateModel(
            name='RespuestaEvaluacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('respuesta_seleccionada', models.CharField(max_length=1)),
                ('tiempo_respuesta', models.FloatField()),
                ('es_correcta', models.BooleanField(default=False)),
                ('fecha_respuesta', models.DateTimeField(auto_now_add=True)),
                ('evaluacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='respuestas', to='users.evaluaciondiagnostica')),
                ('pregunta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.preguntaevaluacion')),
            ],
            options={
                'ordering': ['fecha_respuesta'],
            },
        ),
    ]
